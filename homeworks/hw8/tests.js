import { expect } from 'chai';
import { splitToLines } from "../../src/utils"

const steps = {
    greetings: 1,
    jk: 2,
    introduction: 3,
    post_template: 4,
    add_post: 5,
    like_button: 6,
    like_function: 7,
    finish: 8,
    extra: 9
}

export function generateTests(CONFIG) {
    CONFIG.hints = 'on'

    CONFIG.isStep(steps.greetings) && describe('მერვე დავალება', () => {
        it(`კიდევ ერთხელ და ბოლოჯერ სალამი :) ამ კვირას დროა წინა დავალებები
        შევაჯამოთ და უფრო გამომწვევ ფუნქციებზე ვიმუშაოთ:`)
        
        splitToLines(`
        - თითოეულ პოსტზე კომენტარების დამატება,
        - news feed-ის სორტირება
        - პოსტების, ლაიქებისა და კომენტარების მონაცემთა ბაზაში შეყვანა
        `)
    })

    CONFIG.isStep(steps.jk) && describe('😬', () => {
        it(`ვხუმრობ :)`) 
        it(`ნუ, გეგმა კომენტარების დამატება იყო, მაგრამ გადავწყვიტე 
        უფრო მსუბუქი და სახალისო რამით დავასრულოთ ეს წელი და პატარა ანიმაცია გავაკეთოთ.`)
        it(`ანიმაცია რეალურად მზადაა. მინდა ზოგი ზოგადი დეტალი აგიხსნა და
        მერე უბრალოდ რამდენიმე პარამეტრის შეცვლით უფრო პერსონალიზირებულს გახდი`)
        it(`        
        თუ წინა გვერდზე ჩამოთვლილი ფუნქციები გაგიხარდა, გული არ დაიწყვიტო (და ასევე გამაგებინე ვინ ხარ), 
        სემინარებზე გავივლით მაინც. დამატებით, მიმაჩნია, რომ ეს დავალება ბევრად უფრო
        საინტერესოა. მიუხედავად იმისა, რომ ჩასაბარებელი მოთხოვნები მინიმალურია,
        სურვილის შემთხვევაში კოდში ბევრი რამის შეცვლის და დამატების შესაძლებლობაა
        `)
    })

    CONFIG.isStep(steps.introduction) && describe('შესავალი', () => {
        it(`სემინარზე განვიხილეთ პროგრამირების ენაში ბიბლიოთეკების მნიშვნელობა. ასევე
        ვნახეთ ერთ-ერთი მათგანი ანიმაციებისთვის - anime.js და გამოვიყენეთ გეომეტრიული ფიგურების
        ბიბლიოთეკა - two.js. ამ დავალებისთვის ეს ორი ბიბლიოთეკა გავაერთიანე და ახალი ინტერფეისი
        შევქმენი - animation.js . ჩათვალეთ, რომ საახალწლო ნაძვის ხის გასაკეთებელი ბიბლიოთეკაა. 
        ამ ფაილის კოდში ჩახედვა არაა საჭირო. ბიბლიოთეკის გამოყენების მაგალითი tree.js  ფაილშია და 
        მთავარ ფუნქციებს მე გაგაცნობ.`)
        it(`იმისთვის, რომ იმუშაოს, html ფაილში animation.js სკრიპტ თეგის  ჩამატების შემდეგ (რაც უკვე გავაკეთე) 
        ორი ფუნქციაა აუცილებელი. მთავარი არის ფუნქცია, რომელსაც უნდა ერქვას makeChristmasTree. ახლა ხედავ, რომ 
        გვერდზე არაფერი ჩანს.`)
        it(`გახსენი tree.js ფაილი და პირველი ხაზებს კომენტარის // სიმბოლოები წაუშალე. გადატვირთვის შემდეგ
        ბიბლიოთეკა ფუნქციას იპოვის და თავისით გამოიძახებს`, () => {
            expect(window.makeChristmasTree).to.not.be.an('undefined')
        })
        it(`makeChristmasTree-ში ბიბლიოთეკის იუზერი
        როგორ ხესაც უნდა, ისეთს შექმნის, ისეთი ლოგიკით, როგორსაც აირჩევს. ამ შემთხვევაში მე ავირჩიე
        ეს ლოგიკა და tree.js ფაილში ბიბლიოთეკის გამოყენების ერთ-ერთი მაგალითი მაქვს, ყველა საჭირო ფუნქცია
        გამზადებულია.`)
        it(`მეორე ფუნქცია შემდეგი ფუნქცია createConfig() კონფიგურაციას ქმნის, რომელსაც animation ბიბლიოთეკა ასევე გამოიყენებს და სხვადასხვა ნაწილების
        ავტომატურად გასაკეთებლად გამოიყენებს. არც ამას ვიძახებთ არსად.`)        
    })

    CONFIG.isStep(steps.color) && describe('ფერის შეცვლა', () => {
        it(`ჩემს მიერ შექმნილი ნაძვის ხე ორი ნაწილისგან შედგება - თვითონ ხე (სამკუთხედები) 
        და ნათურები (წრეები). დავიწყოთ სამკუთხედებით`)
        it(`გადადი createTrunk() ფუნქციაზე. როგორც ხედავ, addTrunk(i) ფუნქციას იმდენჯერ ვიძახებთ,
         რა რაოდენობაც კონფიგურაციაში მივუთითეთ triangleCount-სთვის. შენიშვნა: ბიბლიოთეკა კონფიგურაციის
         ფუნქციას თავისით გამოიძახებს, შეამოწმებს, რომ ყველა პარამეტრი სწორად არის მითითებული 
         და შემდეგ ამ ობიექტს config ცვლადში შეინახავს. ამიტომ წერია config.triangleCount for ციკლში`)
        it(`addTrunk(i) ფუნქციაში ჩავიხედოთ. ისე მაქვს გამზადებული, რომ თითოეული სამკუთხედის დახატვისას 
        ფერი დინამიურად აიღოს.`)
        it(`rgb მნიშვნელობები გახსოვს? გადადი getTrunkColor ფუნქციაზე. ყველა მათგანის შემდეგ +i*40 ნიშნავს,
        რომ ყოველი მომდევნო სამკუთხედი უფრო ღია ფერის (40-ით) იქნება. ახლა სამივე მნიშვენლობა ერთი და იგივეა - 
        (50, 50, 50) როცა i არის 0, შემდეგ (90, 90, 90) როცა i არის 1 და ა.შ. რომელიმე მათგანს თუ უფრო გავზრდით, 
        ვიდრე დანარჩენებს, უკვე ფერადიც გახდება. აუცილებელი არაა ნაძვის ხე მწვანე იყოს, შენ რომელი ფერიც
        უფრო მოგწონს, ისეთი შექმენი`, () => {
            /**
             * TODO 
             * getTrunkColor სტრინგის გაპარსვა და შემოწმება, რომ სამივე ფერი ერთი და იგივე არაა
             */
        })
        
    })

    CONFIG.isStep(steps.triangle) && describe('სამკუთხედების რაოდენობა', () => {
        /**
         * ამ ცვლადზე მიბმულია როგორც ხის, ასევე განათების დასამატებელი ფუნქციები - for ცილკები და პოზიციები.
         */


        // ხვდები როგორ მუშაობს 

        // animate ფუნქცია
    })

    CONFIG.isStep(steps.parameters) && describe('სხვა პარამეტრები', () => {
        /**
         * ყველა სხვა პარამეტრი და bound-ები
         */
    })

    CONFIG.isStep(steps.finish) && describe('🌲🎄🤶🏼', () => {
        it(`სულ ეს არის. ბედნიერ ახალ წელს გისურვებ.`)
        it(`დავალება ისევე ატვირთე, როგორც წინა ჯერზე.`)
        it(`თუ მეტი დროის დათმობა გინდა
        ამ ანიმაციისთვის, რამდენიმე რჩევა შემდეგ გვერდზეა.`)
    })

    CONFIG.isStep(steps.extra) && describe('', () => {
        /**
         * script ფაილის გადმოწერა რაღაცეების შესაცვლელად
         * ბიბლიოთეკების მისამართები
         */
    })

}